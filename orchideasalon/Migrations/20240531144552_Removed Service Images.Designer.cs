// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using orchideasalon.Data;

#nullable disable

namespace orchideasalon.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240531144552_Removed Service Images")]
    partial class RemovedServiceImages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b8db1623-f33e-4513-be90-b07eb80cc29a",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = "a33ae0dc-1ebc-4e97-915e-ac2c43d5bd7e",
                            Name = "manager",
                            NormalizedName = "manager"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "e0c1bf77-5048-4c66-a481-b9f7510ca792",
                            RoleId = "b8db1623-f33e-4513-be90-b07eb80cc29a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("orchideasalon.Areas.Identity.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e0c1bf77-5048-4c66-a481-b9f7510ca792",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45bfd88f-47f9-43ff-9f3b-ee05ea8bb258",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHHQlHUrymwC0EK9kfRFwNDKGKqCnCKYoiIQQ4JIY+r4Fr+xaWyOMZGT/ySIxgBzeg==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "9de4d3b5-f70a-4852-8fb3-15bb702a91ab",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("orchideasalon.Models.RegistrationModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Registrations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8dce186e-7f0a-4393-a98f-b00416cbc550"),
                            Approved = true,
                            Date = new DateTime(2024, 6, 30, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Соломія",
                            Notes = "Червоний манікюр",
                            Phone = "0893943003",
                            ServiceId = 1
                        },
                        new
                        {
                            Id = new Guid("1603352b-9a02-4f60-93cb-c02ab5f847f1"),
                            Approved = true,
                            Date = new DateTime(2024, 2, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Орися",
                            Notes = "",
                            Phone = "0893943003",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = new Guid("bab62061-1b56-4deb-83f1-ede3235ab24f"),
                            Approved = true,
                            Date = new DateTime(2024, 2, 1, 13, 45, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Леся",
                            Notes = "",
                            Phone = "0743957294",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = new Guid("75fe90fa-96ee-46c1-8441-8091ad6d7efb"),
                            Approved = true,
                            Date = new DateTime(2024, 6, 30, 11, 45, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Галина",
                            Notes = "",
                            Phone = "0930943903",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = new Guid("ad85f26c-e9c0-4f77-8e4a-89dd4330112f"),
                            Approved = true,
                            Date = new DateTime(2024, 5, 25, 12, 40, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Катерина",
                            Notes = "",
                            Phone = "0645748392",
                            ServiceId = 2
                        },
                        new
                        {
                            Id = new Guid("d7f7ad9b-cc24-4eee-a816-4c2158ddb7ad"),
                            Approved = true,
                            Date = new DateTime(2023, 12, 27, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Соломія",
                            Notes = "",
                            Phone = "0735748392",
                            ServiceId = 3
                        },
                        new
                        {
                            Id = new Guid("29845d38-5d1f-426a-bfc3-8064416d6c57"),
                            Approved = false,
                            FirstName = "Антоніна",
                            Notes = "",
                            Phone = "0453243545"
                        },
                        new
                        {
                            Id = new Guid("36f8d1db-d5d0-411e-8c1a-4e20eac15177"),
                            Approved = false,
                            FirstName = "Соломія",
                            Notes = "",
                            Phone = "0735748392"
                        },
                        new
                        {
                            Id = new Guid("a2eb6302-dee8-4c76-9153-ccbcadf03b2d"),
                            Approved = false,
                            FirstName = "Тетяна",
                            Notes = "",
                            Phone = "0973932904"
                        });
                });

            modelBuilder.Entity("orchideasalon.Models.ServiceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("Services", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Класичний",
                            Name = "Манікюр",
                            Price = 300m
                        },
                        new
                        {
                            Id = 2,
                            Description = "+ укладка",
                            Name = "Стрижка жіноча",
                            Price = 600m
                        },
                        new
                        {
                            Id = 3,
                            Description = "+ масаж",
                            Name = "SPA",
                            Price = 750m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("orchideasalon.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("orchideasalon.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("orchideasalon.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("orchideasalon.Areas.Identity.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("orchideasalon.Models.RegistrationModel", b =>
                {
                    b.HasOne("orchideasalon.Models.ServiceModel", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("Service");
                });
#pragma warning restore 612, 618
        }
    }
}
